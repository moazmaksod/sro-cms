# .github/workflows/docker-build.yml
#
# This workflow builds the application's Docker image to ensure it's not broken.
# It runs automatically on every push or pull request to the 'main' branch.

name: Docker Build CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # The type of virtual machine the job will run on
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository code so the workflow can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx for advanced features like caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker Hub (Optional, but good practice)
      # This is not strictly required for just building, but it's needed if you ever want to push the image.
      # You would need to add DOCKERHUB_USERNAME and DOCKERHUB_TOKEN as secrets in your GitHub repository settings.
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build the Docker image
      # This is the core step. It uses the official Docker build action, which has
      # excellent support for caching to speed up future builds.
      - name: Build the Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.docker/Dockerfile
          push: false # We are only building, not pushing the image to a registry
          tags: sro-cms-app:latest
          cache-from: type=gha # Enable caching from the GitHub Actions cache
          cache-to: type=gha,mode=max # Enable writing to the GitHub Actions cache

      # Step 5 (Future Improvement): You could add a step here to run tests
      # - name: Run Laravel Tests
      #   run: |
      #     docker-compose run --rm app php artisan test
